#include<stdio.h>
#include<stdlib.h>
struct num
{
	int no;
	int flag;
	int index;
};
typedef struct num num;
int compare(const void *x,const void *y)
{
	num *p=(num *)x;
	num *q=(num *)y;
	if(p->no>q->no)
		return 1;
	return 0;
}
int max(int a,int b)
{
	if(a>=b)
		return a;
	return b;
}
int cmp(const void *a,const void *b)
{
	return *(int *)a>*(int *)b;
}
int main()
{
	int n,k;
	scanf("%d%d",&n,&k);
	int i;
	num *a,*b,*c;
	int *d;
	int flag=1;
	a=(num *)malloc((n+1)*sizeof(num));
	b=(num *)malloc((n+1)*sizeof(num));
	d=(int *)malloc((n/2)*sizeof(int));

	for(i=0;i<n;i++)
	{
		scanf("%d",&a[i].no);
		a[i].flag=0;
		a[i].index=i;
		b[i]=a[i];
	}
	qsort(b,n,sizeof(num),compare);
	int j,x,z=0,tmp=0;
	for(i=0,j=n-1;i<=j;)
	{
		if(b[i].no+b[j].no>k)
			j--;
		else if(b[i].no+b[j].no<k)
			i++;
		else if(b[i].no+b[j].no==k && n&1)
		{
			if(b[i].index>n/2&&b[j].index>n/2)
			{
				b[i].index=n-b[i].index-1;
				b[j].index=n-b[j].index-1;
				x=max(b[i].index,b[j].index);
				if(b[i].no==b[j].no)
					flag=0;
				else
				{       
					d[z++]=x+1;
					tmp=1;
				}

			}
			else if(b[i].index>n/2)
			{
				b[i].index=n-b[i].index-1;
				x=max(b[i].index,b[j].index);
				if(b[i].no==b[j].no)
					flag=0;
				else
				{       
					d[z++]=x+1;
					tmp=1;
				}

			}
			else if(b[j].index>n/2)
			{
				b[j].index=n-b[j].index-1;
				x=max(b[i].index,b[j].index);
				if(b[i].no==b[j].no)
					flag=0;
				else
				{
					d[z++]=x+1;
					tmp=1;
				}
			}
			else
			{
				x=max(b[i].index,b[j].index);
				if(b[i].no==b[j].no)
					flag=0;
				else
				{       
					d[z++]=x+1;
					tmp=1;
				}


			}
			else if(b[i]+b[j]==k)
			{
			
			}
			j--;	
		}
	}
	if(tmp==0&&flag==0)
	{
		printf("-1\n");
		return 0;
	}
	qsort(d,z,sizeof(int),cmp);
	printf("%d\n",d[0]);

	return 0;
}
